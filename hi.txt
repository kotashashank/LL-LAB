//make new gate, except for input ports
    gate_t new_gate = malloc(sizeof(struct gate));
    new_gate->op = op;
    new_gate->port_output = out;
    new_gate->delay = delay;
    


    // create one-dimensional input_port array
    va_list va;
    va_start(va, num_in);

    //create input list
    for (int i = 0; i < num_in; i++) {
        port_t current = va_arg(va, port_t);
        
        linked_list newPortNode = malloc(sizeof(linked_list));
        newPortNode->data = current;
        newPortNode->next = new_gate->port_inputs;
        new_gate->port_inputs = newPortNode;


        linked_list newGateNode = malloc(sizeof(linked_list));
        newGateNode->data = new_gate;
        newGateNode->next = ((pdata_t) current->misc)->nextGates;
        ((pdata_t) current->misc)->nextGates = newGateNode;

        printf("adding port %d: port %s to this gate\n", i, current->name);
    }

    linked_list currentPort = new_gate->port_inputs;
    printf("ports in gate: ");
    while(currentPort != NULL)
    {
        printf("%s, ", ((port_t) currentPort->data)->name);
        currentPort = currentPort->next;
    }
    printf("\n");
    va_end(va);








linked_list current = ((pdata_t)(HA1a->misc))->nextGates;
    while(current != NULL && current->data != NULL) {
        printf("port !!");
        printf("port %i | ", ((gate_t) (current->data))->op);
        current = current->next;
    }